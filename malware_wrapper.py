import os
import sys
import pickle
import numpy as np
import tensorflow as tf
from keras import backend as K
from PIL import Image
import keras
import tempfile
import traceback

# Register keras functions to properly load the model
def recall_m(y_test, y_pred):
    true_positives = K.sum(K.round(K.clip(y_test * y_pred, 0, 1)))
    possible_positives = K.sum(K.round(K.clip(y_test, 0, 1)))
    recall = true_positives / (possible_positives + K.epsilon())
    return recall

def precision_m(y_test, y_pred):
    true_positives = K.sum(K.round(K.clip(y_test * y_pred, 0, 1)))
    predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))
    precision = true_positives / (predicted_positives + K.epsilon())
    return precision

def f1_m(y_test, y_pred):
    precision = precision_m(y_test, y_pred)
    recall = recall_m(y_test, y_pred)
    return 2*((precision*recall)/(precision+recall+K.epsilon()))

class MalwareImageClassifier:
    """
    A class to detect malware using image-based classification with Keras.
    """
    
    def __init__(self):
        """Initialize the malware image classifier."""
        self.model = None
        self.class_names = None
        self.load_model()
        
    def load_model(self):
        """Load the pre-trained malware classification model."""
        try:
            # Get the base directory (project root)
            base_dir = os.getcwd()
            
            # Model path - using relative paths to improve portability
            model_path = "D:\Viren\AIKD\Malware\malware-dection\Classifier\Malware_Classifier\pickel_malware_classifier.pkl"
            classes_path = "D:\Viren\AIKD\Malware\malware-dection\Classifier\Malware_Classifier\Malware_classes.pkl"
            
            # Load the model
            print(f"Loading model from: {model_path}")
            with open(model_path, 'rb') as file:
                self.model = pickle.load(file)
            
            # Load the class names
            print(f"Loading class names from: {classes_path}")
            with open(classes_path, 'rb') as file:
                self.class_names = pickle.load(file)
                
            print(f"Model loaded successfully with {len(self.class_names)} malware classes")
            
        except Exception as e:
            print(f"Error loading malware classifier model: {str(e)}")
            traceback.print_exc()
            self.model = None
            self.class_names = None
            
    def convert_to_png(self, fpath, img_size=(64, 64, 3)):
        """Convert binary file to image."""
        try:
            with open(fpath, 'rb') as file:
                binary_data = file.read()
                
            # Convert the bytes to a numpy array
            file_array = np.frombuffer(binary_data, dtype=np.uint8)
            
            # Resize the array to the desired image size
            resized_array = np.resize(file_array, img_size)
            
            # Create an RGB PIL Image from the resized array
            image = Image.fromarray(resized_array, mode='RGB')
            
            return image
            
        except Exception as e:
            print(f"Error converting file to PNG: {str(e)}")
            return None
            
    def classify_file(self, file_path):
        """
        Classify a file as malware or benign using image-based classification.
        
        Parameters:
        ----------
        file_path : str
            Path to the file to classify
            
        Returns:
        -------
        dict
            Classification results with malware family and confidence
        """
        if self.model is None or self.class_names is None:
            return {
                "success": False,
                "error": "Model not loaded properly"
            }
            
        try:
            # Convert file to image
            png_image = self.convert_to_png(file_path)
            if png_image is None:
                return {
                    "success": False, 
                    "error": "Failed to convert file to image"
                }
                
            # Convert PNG to image array
            img_array = keras.utils.img_to_array(png_image)
            img_array = tf.expand_dims(img_array, 0)
            
            # Predict
            predictions = self.model.predict(img_array)
            score = tf.nn.softmax(predictions[0])
            
            # Get the class with highest probability
            class_index = np.argmax(score)
            class_name = self.class_names[class_index]
            confidence = float(np.max(score) * 100)
            
            # Build result dictionary
            result = {
                "success": True,
                "malware_family": class_name,
                "confidence": confidence,
                "is_malware": class_name != "Benign",  # Assuming "Benign" is in class_names for non-malware
                "probabilities": {
                    self.class_names[i]: float(score[i] * 100) 
                    for i in range(len(self.class_names))
                }
            }
            
            return result
            
        except Exception as e:
            print(f"Error classifying file: {str(e)}")
            traceback.print_exc()
            return {
                "success": False,
                "error": str(e)
            }
            
# For testing
if __name__ == "__main__":
    classifier = MalwareImageClassifier()
    print(classifier)
    if len(sys.argv) > 1:
        file_path = sys.argv[1]
        print(f"Classifying: {file_path}")
        result = classifier.classify_file(file_path)
        print(f"Result: {result}")
